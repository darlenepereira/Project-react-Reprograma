{"ast":null,"code":"var elementResizeEvent = require('element-resize-event');\n\nmodule.exports = {\n  getInitialState: function () {\n    if (this.props.initialComponentWidth !== undefined && this.props.initialComponentWidth !== null) {\n      return {\n        componentWidth: this.props.initialComponentWidth\n      };\n    } else {\n      return {};\n    }\n  },\n  // Add our resize sensor.\n  componentDidMount: function () {\n    this.setState({\n      componentWidth: this.getDOMNode().getBoundingClientRect().width\n    });\n    elementResizeEvent(this.getDOMNode(), this.onResize);\n  },\n  // When the DOM updates, check that our resize sensor is still there.\n  componentDidUpdate: function () {\n    if (0 === this.getDOMNode().getElementsByClassName('resize-sensor').length) {\n      elementResizeEvent(this.getDOMNode(), this.onResize);\n    }\n  },\n  onResize: function () {\n    this.setState({\n      componentWidth: this.getDOMNode().getBoundingClientRect().width\n    });\n  }\n};","map":{"version":3,"sources":["/home/darlene/√Årea de Trabalho/Reprograma-react/projeto-final-reprograma/node_modules/react-component-width-mixin/index.js"],"names":["elementResizeEvent","require","module","exports","getInitialState","props","initialComponentWidth","undefined","componentWidth","componentDidMount","setState","getDOMNode","getBoundingClientRect","width","onResize","componentDidUpdate","getElementsByClassName","length"],"mappings":"AAAA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAhC;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,eAAe,EAAE,YAAW;AAC1B,QAAI,KAAKC,KAAL,CAAWC,qBAAX,KAAqCC,SAArC,IAAkD,KAAKF,KAAL,CAAWC,qBAAX,KAAqC,IAA3F,EAAiG;AAC/F,aAAO;AACLE,QAAAA,cAAc,EAAE,KAAKH,KAAL,CAAWC;AADtB,OAAP;AAGD,KAJD,MAIO;AACL,aAAO,EAAP;AACD;AACF,GATc;AAUf;AACAG,EAAAA,iBAAiB,EAAE,YAAW;AAC5B,SAAKC,QAAL,CAAc;AACZF,MAAAA,cAAc,EAAE,KAAKG,UAAL,GAAkBC,qBAAlB,GAA0CC;AAD9C,KAAd;AAGAb,IAAAA,kBAAkB,CAAC,KAAKW,UAAL,EAAD,EAAoB,KAAKG,QAAzB,CAAlB;AACD,GAhBc;AAiBf;AACAC,EAAAA,kBAAkB,EAAE,YAAW;AAC7B,QAAI,MAAM,KAAKJ,UAAL,GAAkBK,sBAAlB,CAAyC,eAAzC,EAA0DC,MAApE,EAA4E;AAC1EjB,MAAAA,kBAAkB,CAAC,KAAKW,UAAL,EAAD,EAAoB,KAAKG,QAAzB,CAAlB;AACD;AACF,GAtBc;AAuBfA,EAAAA,QAAQ,EAAE,YAAW;AACnB,SAAKJ,QAAL,CAAc;AACZF,MAAAA,cAAc,EAAE,KAAKG,UAAL,GAAkBC,qBAAlB,GAA0CC;AAD9C,KAAd;AAGD;AA3Bc,CAAjB","sourcesContent":["var elementResizeEvent = require('element-resize-event');\n\nmodule.exports = {\n  getInitialState: function() {\n    if (this.props.initialComponentWidth !== undefined && this.props.initialComponentWidth !== null) {\n      return {\n        componentWidth: this.props.initialComponentWidth\n      };\n    } else {\n      return {};\n    }\n  },\n  // Add our resize sensor.\n  componentDidMount: function() {\n    this.setState({\n      componentWidth: this.getDOMNode().getBoundingClientRect().width\n    });\n    elementResizeEvent(this.getDOMNode(), this.onResize);\n  },\n  // When the DOM updates, check that our resize sensor is still there.\n  componentDidUpdate: function() {\n    if (0 === this.getDOMNode().getElementsByClassName('resize-sensor').length) {\n      elementResizeEvent(this.getDOMNode(), this.onResize);\n    }\n  },\n  onResize: function() {\n    this.setState({\n      componentWidth: this.getDOMNode().getBoundingClientRect().width\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"script"}