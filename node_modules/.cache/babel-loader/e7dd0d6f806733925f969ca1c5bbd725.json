{"ast":null,"code":"// Generated by CoffeeScript 1.9.2\nvar isArray;\nisArray = require('isarray');\n\nmodule.exports = function (props, state) {\n  var childComponentWidth, componentsPerRow, idealComponentsPerRow;\n\n  if (props.margin === 0) {\n    idealComponentsPerRow = state.componentWidth / props.targetWidth;\n  } else {\n    idealComponentsPerRow = (state.componentWidth / props.margin + 1) / (props.targetWidth / props.margin + 1);\n  }\n\n  componentsPerRow = Math.round(idealComponentsPerRow);\n  childComponentWidth = (state.componentWidth + props.margin) / componentsPerRow - props.margin;\n  return [childComponentWidth, componentsPerRow];\n};","map":{"version":3,"sources":["/home/darlene/√Årea de Trabalho/Reprograma-react/projeto-final-reprograma/node_modules/react-component-gallery/dist/calculate_layout.js"],"names":["isArray","require","module","exports","props","state","childComponentWidth","componentsPerRow","idealComponentsPerRow","margin","componentWidth","targetWidth","Math","round"],"mappings":"AAAA;AACA,IAAIA,OAAJ;AAEAA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgBC,KAAhB,EAAuB;AACtC,MAAIC,mBAAJ,EAAyBC,gBAAzB,EAA2CC,qBAA3C;;AACA,MAAIJ,KAAK,CAACK,MAAN,KAAiB,CAArB,EAAwB;AACtBD,IAAAA,qBAAqB,GAAGH,KAAK,CAACK,cAAN,GAAuBN,KAAK,CAACO,WAArD;AACD,GAFD,MAEO;AACLH,IAAAA,qBAAqB,GAAG,CAAEH,KAAK,CAACK,cAAN,GAAuBN,KAAK,CAACK,MAA9B,GAAwC,CAAzC,KAAgDL,KAAK,CAACO,WAAN,GAAoBP,KAAK,CAACK,MAA3B,GAAqC,CAApF,CAAxB;AACD;;AACDF,EAAAA,gBAAgB,GAAGK,IAAI,CAACC,KAAL,CAAWL,qBAAX,CAAnB;AACAF,EAAAA,mBAAmB,GAAI,CAACD,KAAK,CAACK,cAAN,GAAuBN,KAAK,CAACK,MAA9B,IAAwCF,gBAAzC,GAA6DH,KAAK,CAACK,MAAzF;AACA,SAAO,CAACH,mBAAD,EAAsBC,gBAAtB,CAAP;AACD,CAVD","sourcesContent":["// Generated by CoffeeScript 1.9.2\nvar isArray;\n\nisArray = require('isarray');\n\nmodule.exports = function(props, state) {\n  var childComponentWidth, componentsPerRow, idealComponentsPerRow;\n  if (props.margin === 0) {\n    idealComponentsPerRow = state.componentWidth / props.targetWidth;\n  } else {\n    idealComponentsPerRow = ((state.componentWidth / props.margin) + 1) / ((props.targetWidth / props.margin) + 1);\n  }\n  componentsPerRow = Math.round(idealComponentsPerRow);\n  childComponentWidth = ((state.componentWidth + props.margin) / componentsPerRow) - props.margin;\n  return [childComponentWidth, componentsPerRow];\n};\n"]},"metadata":{},"sourceType":"script"}